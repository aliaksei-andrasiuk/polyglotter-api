const fs = require('fs');
const csv = require('csv-parser');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function importCSV(filePath) {
  const rows = [];

  fs.createReadStream(filePath)
    .pipe(csv())
    .on('data', (data) => {
      const clean = {};
      for (const key in data) {
        const normalizedKey = key.trim().replace(/\uFEFF/, ''); // –£–¥–∞–ª—è–µ–º BOM
        clean[normalizedKey] = typeof data[key] === 'string' ? data[key].trim() : data[key];
      }

      const requiredFields = ['wordId', 'phraseId', 'sourceRoot', 'sourceWord', 'targetPhrase'];
      const isValid = requiredFields.every(field => clean[field] && clean[field].length > 0);

      if (!isValid) {
        console.warn('‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', clean);
        return;
      }

      rows.push({
        phraseId: clean.phraseId,
        wordId: clean.wordId,
        sourceRoot: clean.sourceRoot,
        sourcePrefix: clean.sourcePrefix || null,
        sourceWord: clean.sourceWord,
        targetPhrase: clean.targetPhrase,
        wordsCount: parseInt(clean.wordsCount, 10) || 1,
      });
    })
    .on('end', async () => {
      console.log(`üü¢ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è ${rows.length} –∑–∞–ø–∏—Å–µ–π...`);
      let success = 0;
      for (const row of rows) {
        try {
          await prisma.phraseMapping.create({ data: row });
          success++;
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ ${row.phraseId}:`, err.message);
        }
      }
      console.log(`‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: ${success} —Å—Ç—Ä–æ–∫.`);
      await prisma.$disconnect();
    });
}

importCSV('pl-en-dataset.csv');
